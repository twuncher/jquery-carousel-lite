{"name":"jCarouselLite","body":"# jCarouselLite\r\n\r\nBy [Karl Swedberg](http://www.learningjquery.com/), based on the original by [Ganeshji Marwaha](gmarwaha.com).\r\n\r\nThis jQuery plugin creates a carousel-style navigation widget for images, or any content, from simple HTML markup. Check out a [bare-bones demo](http://plugins.learningjquery.com/jcarousellite/demo/).\r\n\r\nThe HTML markup to build the carousel can be as simple as the following:\r\n\r\n```html\r\n<div class=\"carousel\">\r\n   <ul>\r\n       <li><img src=\"image/1.jpg\" alt=\"1\"></li>\r\n       <li><img src=\"image/2.jpg\" alt=\"2\"></li>\r\n       <li><img src=\"image/3.jpg\" alt=\"3\"></li>\r\n   </ul>\r\n</div>\r\n```\r\n\r\nThis snippet is nothing but a simple div containing an unordered list of images.\r\nThe \"carousel\" class for the div here is **just for the sake of explanation**.\r\nYou can use any class — or none at all — for any of the elements.\r\n\r\nTo manually navigate the elements of the carousel, you can include some kind of navigation buttons.\r\nFor example, you can have a \"previous\" button to go backward and a \"next\" button to go forward.\r\nThey need not be part of the carousel `div` itself; they can be any element in your document.\r\nFor example, let's assume you want the following elements to be used as prev and next buttons:\r\n\r\n```html\r\n<button class='prev'> &raquo; </button>\r\n<button class='next'> &laquo; </button>\r\n```\r\n\r\nAll you need to do is call the carousel component on the `div` element that represents it and pass in the\r\nnavigation buttons as options.\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev'\r\n});\r\n```\r\n\r\nThere are quite a few other options that you can use to customize it. Each will be explained with an example below.\r\n\r\n## Options\r\n\r\nYou can specify all the options shown below as an options object parameters.\r\n\r\n### `btnPrev`, `btnNext` : string - no defaults\r\n\r\nexample:\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev'\r\n});\r\n```\r\n\r\nCreates a basic carousel. Clicking \"btnPrev\" navigates backwards and \"btnNext\" navigates forward.\r\n\r\n### `btnGo` - array | jQuery object - no defaults\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev',\r\n  btnGo: ['.one', '.two', '.three']\r\n});\r\n```\r\n\r\nYou can use the `btnGo` option along with the btnNext/btnPrev buttons or instead of them.\r\nthe item number within the carousel, you can use this option.\r\nIf you supply an array, the index of each item in the array represents the index of the element in the carousel.\r\nIn other words, if the first element in the array is \".one,\" then clicking the element represented by \".one\"\r\nwill slide the carousel to the first element.\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnGo: $('#carousel-nav a')\r\n});\r\n```\r\n\r\nIn this example, clicking a link within `#carousel-nav` will slide the carousel to the slide with an index matching the link's index among the other links.\r\n\r\n### `mouseWheel` : boolean - default is false\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  mouseWheel: true\r\n});\r\n```\r\n\r\nThe carousel can also be navigated using the mouse wheel interface of a scroll mouse instead of using buttons. To get this feature working, you have to do 2 things.\r\n\r\n* you have to include the mouse-wheel plugin from Brandon Aaron (http://github.com/brandonaaron/).\r\n* you will have to set the option \"mouseWheel\" to true. That's it, now you will be able to navigate your carousel using the mouse wheel. Using buttons and mouseWheel or not mutually exclusive. You can still have buttons for navigation as well. They complement each other. To use both together, just supply the options required for both as shown below.\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev',\r\n  mouseWheel: true\r\n});\r\n```\r\n\r\n### `auto` : Boolean | Number - default is false, meaning automatic scrolling is disabled by default\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  auto: true,\r\n  speed: 500\r\n});\r\n```\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  auto: 2,\r\n  scroll: 1,\r\n  visible: 2,\r\n  btnNext: '.next',\r\n  btnPrev: '.prev'\r\n});\r\n```\r\n\r\n\r\nThe carousel will navigate by itself if this option is set to `true` or a number greater than 0. If `true`, the carousel will scroll by the number of slides indicated by the `scroll` option (default is 1). If a positive number, it will auto-scroll by that number instead, although clicks on the previous/next button will still cause it to scroll by the `scroll` option's number.\r\n\r\n### `timeout` : number - default is 4000\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  auto: true,\r\n  timeout: 8000\r\n});\r\n```\r\n\r\nWhen the `auto` option is set to `true` (or a number greater than 0), the carousel automatically transitions after the amount of time specified by the `timeout` option.\r\n\r\n### `speed` : number - default is 200\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev',\r\n  speed: 800\r\n});\r\n```\r\n\r\nSpecifying a speed will slow-down or speed-up the sliding speed of your carousel. Try it out with\r\ndifferent speeds like 800, 600, 1500 etc. Providing 0, will remove the slide effect.\r\n\r\n### `easing` : string - no easing effects by default.\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev',\r\n  easing: 'bounceout'\r\n});\r\n```\r\n\r\nYou can specify any easing effect. Note: You need easing plugin for that. Once specified,\r\nthe carousel will slide based on the provided easing effect.\r\n\r\n### `vertical` : boolean - default is false\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev',\r\n  vertical: true\r\n});\r\n```\r\n\r\nDetermines the direction of the carousel. true, means the carousel will display vertically. The next and\r\nprev buttons will slide the items vertically as well. The default is false, which means that the carousel will\r\ndisplay horizontally. The next and prev items will slide the items from left-right in this case.\r\n\r\n### `circular` : boolean - default is true\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev',\r\n  circular: false\r\n});\r\n```\r\n\r\nSetting it to `true` enables circular navigation. This means, if you click \"next\" after you reach the last\r\nelement, you will automatically slide to the first element and vice versa. If you set circular to false, then\r\nif you click on the \"next\" button after you reach the last element, you will stay in the last element itself\r\nand similarly for \"previous\" button and first element.\r\n\r\n### `visible` : number - default is 3\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev',\r\n  visible: 4\r\n});\r\n```\r\n\r\nThis specifies the number of items visible at all times within the carousel. The default is 3.\r\nYou are even free to experiment with real numbers. Eg: \"3.5\" will have 3 items fully visible and the\r\nlast item half visible. This gives you the effect of showing the user that there are more images to the right.\r\n\r\n### `start` : number - default is 0\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev',\r\n  // start on the *third* item\r\n  start: 2\r\n});\r\n```\r\n\r\nYou can specify from which item the carousel should start. Remember, the first item in the carousel\r\nhas a start of 0, and so on.\r\n\r\n### `scroll` : number - default is 1\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev',\r\n  scroll: 2\r\n});\r\n```\r\n\r\nThe number of items that should scroll/slide when you click the next/prev navigation buttons. By\r\ndefault, only one item is scrolled, but you may set it to any number. Eg: setting it to \"2\" will scroll\r\n2 items when you click the next or previous buttons.\r\n\r\n### `init` : function - callback\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev',\r\n  init: function(opts, $lis) {\r\n    if ($lis.length > opts.visible) {\r\n      $('div.carousel').append('<a class=\"prevnext prev\">previous</a> <a class=\"prevnext next\">next</a>');\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nThe init callback function allows you to do some logic for each carousel div before any of the carousel behavior and styles are applied to it.\r\nThe function will be passed two arguments:\r\n\r\n1. Object representing the result of merging the default settings with the options object passed in when calling .jCarousellite()\r\n2. jQuery Object containing the top-level `<li>` elements in the carousel (useful for checking their length against number of items to be visible at once)\r\n\r\nIf the function returns `false`, the plugin will skip all the carousel magic for that carousel `<div>`.\r\n\r\n### `beforeStart`, `afterEnd` : function - callbacks\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').jCarouselLite({\r\n  btnNext: '.next',\r\n  btnPrev: '.prev',\r\n  beforeStart: function(a, direction) {\r\n    alert('Before animation starts:' + a);\r\n  },\r\n  afterEnd: function(a, , direction) {\r\n    alert('After animation ends:' + a);\r\n  }\r\n});\r\n```\r\n\r\nIf you want to do some logic before the slide starts and after the slide ends, you can register these 2 callbacks.\r\nThe functions will be passed two arguments:\r\n\r\n1. Array of elements that are visible at the time of callback.\r\n2. Boolean indicating whether the direction is forward (`true`) or backward (`false`);\r\n\r\n## Events\r\n\r\nThe plugin binds a few custom event handlers to the wrapping `div` element. They can be triggered at any time by using jQuery's event triggering mechanism. If other custom events are bound to the same elements, you may wish to trigger these using the `.jc` namespace. For example, instead of `.trigger(\"pauseCarousel\")`, you could write `.trigger(\"pauseCarousel.jc\")`.\r\n\r\n### `pauseCarousel`\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').trigger('pauseCarousel')\r\n```\r\n\r\nPauses an autoscrolling carousel until `resumeCarousel` is triggered. Note: if the `pause` option is set to `true`, then the `resumeCarousel` event is automatically triggered when the mouse leaves the carousel div.\r\n\r\n###  `resumeCarousel`\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').trigger('resumeCarousel')\r\n```\r\n\r\nResumes an autoscrolling carousel after having been paused.\r\n\r\n### `endCarousel`\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').trigger('endCarousel')\r\n```\r\n\r\nStops the carousel from functioning and removes all events and data bound by the plugin.\r\n\r\n### `go`\r\n\r\nexample\r\n\r\n```javascript\r\n$('div.carousel').trigger('go', 3)\r\n```\r\n\r\n```javascript\r\n$('div.carousel').trigger('go', '+=2')\r\n```\r\nWhen triggering the `go` custom event, you can pass in a number or a string representing a relative number (\"+=n\" or \"-=n\") to specify which item in the carousel to go to. The default is \"+=1\" (i.e. the next item).\r\n\r\n","tagline":"jQuery Plugin based on Ganeshji Marwaha's jCarouselLite","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}